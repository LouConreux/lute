%YAML 1.3
---
title: "LUTE Task Configuration" # Include experiment description if desired
#experiment: ""
#run: "{{ $RUN }}"
date: "2023/10/25"
lute_version: 0.1      # Do not be change unless need to force older version
task_timeout: 600
work_dir: "/sdf/data/lcls/ds/xpp"
...
---
###########
# Smalldata
###########
# TR-Scattering analysis - produces scan plots (t0/spatial overlap, etc.)
AnalyzeSmallDataXSS:
  #smd_path: ""             # Include to analyze ONE specified smalldata file
  # Detector selection
  xss_detname: "epix10k2M"  # Name of detector with scattering signal
  ipm_var: "ipm2/sum"       # ipm PV to use for x-ray intensity filtering
  # Motor scans to search for
  scan_var:
    - "lxt"
    - "lens_v"
    - "lens_h"
  # Thresholds used for data filtering
  thresholds:
    min_Iscat: 10           # Minimum integrated scattering intensity
    min_ipm: 500            # Minimum x-ray intensity at selected ipm

# TR-Absorption analysis - produces scan plots (t0/spatial overlap, etc.)
# Scattering signal is used for normalization, that's why the XSS detector is
# required
AnalyzeSmallDataXAS:
  #smd_path: ""
  # Detector selection - scattering det used for normalization.
  xas_detname: "epix_1"     # Name of detector with XAS signal
  xss_detname: "epix10k2M"  # Name of detector with scattering signal
  ipm_var: "ipm2/sum"       # ipm to use for x-ray intensity filtering
  # Motor scans to search for
  scan_var:
    - "lxt"
    - "lxe_opa"
    - "lxt_fast"
  ccm: "epics/ccm_E"
  ccm_set: "epicsUser/ccm_E_setpoint" # Requested CCM setpoint PV. Makes binning better but not required.
  # Thresholds used for data filtering
  thresholds:
    min_Iscat: 10           # Minimum integrated scattering intensity
    min_ipm: 500            # Minimum x-ray intensity at selected ipm
  #element: null       # For EXAFS -- currently unused

# TR-Emission analysis - produces scan plots (t0/spatial overlap, etc.)
# Scattering signal is used for normalization, that's why the XSS detector is
# required
AnalyzeSmallDataXES:
  #smd_path: ""             # Include to analyze ONE specified smalldata file
  # Detector selection - scattering det used for normalization.
  xes_detname: "epix_1"     # Name of detector with XAS signal
  xss_detname: "epix10k2M"  # Name of detector with scattering signal
  ipm_var: "ipm2/sum"       # ipm to use for x-ray intensity filtering
  # Motor scans to search for
  scan_var:
    - "lxt"
    - "lxt_fast"
  # Thresholds used for data filtering
  thresholds:
    min_Iscat: 10           # Minimum integrated scattering intensity
    min_ipm: 1000           # Minimum x-ray intensity at selected ipm
  # Optional settings.
  #invert_xes_axes: false   # Switch projection axis for spectrum. Default projects along 1
  #rot_angle: null          # If not null, rotate images by N degrees before projection
  #batch_size: 0            # If not 0, load images in batches of N. Helps OOM.

# Producer will be auto-determined. Set only if you have a separate install
# Set `directory` if you want to write to a different folder
# For out of memory issues try setting gather_interval
SubmitSMD:
  # Command line arguments
  #producer: "/path/to/smalldata_tools/producers/smd_producer.py"
  #run: 99
  #experiment: ""
  #stn: 0
  #directory: ""
  #gather_interval: 25
  #norecorder: False
  #url: "https://pswww.slac.stanford.edu"
  #epicsAll: False
  #full: False
  #fullSum: False
  default: true
  #image: False
  #tiff: False
  #centerpix: False
  #postRuntable: False
  #wait: False
  #xtcav: False
  #noarch: False
  # Producer variables. These are substituted into the producer to run specific
  # data reduction algorithms. Uncomment and modify as needed.
  # If you prefer to modify the producer file directly, leave commented.
  # Beginning with `getROIs`, you will need to modify the first entry to be a
  # detector. This detector MUST MATCH one of the detectors in `detnames`.
  # In the future this will be automated. If you have multiple detectors you can
  # add them with their own set of parameters.
  #detnames: []
  #epicsPV: []
  #ttCalib: []
  #getROIs:
  #  jungfrau1M:   # Change to detector name
  #    ROIs: [[[1, 2], [157, 487], [294, 598]]]
  #    writeArea: True   # Whether to save ROI, if False, save sum but not img.
  #    thresADU: None
  #getAzIntParams:
  #  Rayonix:
  #    eBeam: 18
  #    center: [87526.79161840, 92773.3296889500]
  #    dis_to_sam: 80.0
  #    tx: 0
  #    ty: 0
  #getAzIntPyFAIParams:
  #  Rayonix:
  #    pix_size: 176e-6
  #    ai_kwargs:
  #      dist: 1
  #      poni1: 960 * 1.76e-4
  #      poni2: 960 * 1.76e-4
  #    npts: 512
  #    int_units: "2th_deg"
  #    return2d: False
  #getPhotonsParams:
  #  jungfrau1M:
  #    ADU_per_photon: 9.5
  #    thresADU: 0.8
  #getDropletParams:
  #  epix_1:
  #    threshold: 5
  #    thresholdLow: 5
  #    thresADU: 60
  #    useRms: True
  #    nData: 1e5
  #getDroplet2Photons:
  #  epix_alc1:
  #    droplet:
  #      threshold: 10
  #      thresholdLow: 3
  #      thresADU: 10
  #      useRms: True
  #    d2p:
  #      aduspphot: 162
  #      mask: np.load('path_to_mask.npy')
  #      cputime: True
  #    nData: 3e4
  #getSvdParams:
  #  acq_0:
  #    basis_file: None
  #    n_pulse: 1
  #    delay: None
  #    return_reconstructed: True
  #getAutocorrParams:
  #  epix_2:
  #    mask: "/sdf/home/e/example/dataAna/mask_epix.npy"
  #    thresAdu: [72.0, 1.0e6]
  #    save_range: [70, 50]
  #    save_lineout: True
...
